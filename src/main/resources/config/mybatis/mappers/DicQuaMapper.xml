<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.silita.dao.DicQuaMapper">

    <resultMap id="BaseResultMap" type="com.silita.model.DicQua">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="parent_id" property="parentId" jdbcType="VARCHAR"/>
        <result column="qua_name" property="quaName" jdbcType="VARCHAR"/>
        <result column="grade_type" property="gradeType" jdbcType="VARCHAR"/>
        <result column="qua_code" property="quaCode" jdbcType="VARCHAR"/>
        <result column="order_no" property="orderNo" jdbcType="INTEGER"/>
        <result column="level" property="level" jdbcType="VARCHAR"/>
        <result column="biz_type" property="bizType" jdbcType="VARCHAR"/>
        <result column="expired" property="expired" jdbcType="VARCHAR"/>
        <result column="is_leaf" property="isLeaf" jdbcType="INTEGER"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <result column="desc" property="desc" jdbcType="VARCHAR"/>
        <!--<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />-->
        <!--<result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />-->
        <result column="create_by" property="createBy" jdbcType="VARCHAR"/>
        <result column="update_by" property="updateBy" jdbcType="VARCHAR"/>
    </resultMap>

    <insert id="insertDicQual" parameterType="com.silita.model.DicQua">
        INSERT INTO `dic_qua`(
        <if test="id != null and id != ''">
            `id`,
        </if>
        <if test="parentId != null and parentId != ''">
            `parent_id`,
        </if>
        <if test="quaName != null and quaName != ''">
            `qua_name`,
        </if>
        <if test="gradeType != null and gradeType != ''">
            `grade_type`,
        </if>
        <if test="quaCode != null and quaCode != ''">
            `qua_code`,
        </if>
        <if test="orderNo != null and orderNo != ''">
            `order_no`,
        </if>
        <if test="level != null and level != ''">
            `level`,
        </if>
        <if test="bizType != null and bizType != ''">
            `biz_type`,
        </if>
        <if test="expired != null and expired != ''">
            `expired`,
        </if>
        <if test="isLeaf != null and isLeaf != ''">
            `is_leaf`,
        </if>
        <if test="remark != null and remark != ''">
            `remark`,
        </if>
        <if test="desc != null and desc != ''">
            `desc`,
        </if>
        <if test="benchName != null and benchName != ''">
            `bench_name`,
        </if>
        <if test="createBy != null and createBy != ''">
            `create_by`,
        </if>
        <if test="updateTime != null">
            `update_time`,
        </if>
        <if test="updateBy != null and updateBy != ''">
            `update_by`,
        </if>
        <if test="createTime != null">
            `create_time`
        </if>
        )
        VALUES (
        <if test="id != null and id != ''">
            #{id},
        </if>
        <if test="parentId != null and parentId != ''">
            #{parentId},
        </if>
        <if test="quaName != null and quaName != ''">
            #{quaName},
        </if>
        <if test="gradeType != null and gradeType != ''">
            #{gradeType},
        </if>
        <if test="quaCode != null and quaCode != ''">
            #{quaCode},
        </if>
        <if test="orderNo != null and orderNo != ''">
            #{orderNo},
        </if>
        <if test="level != null and level != ''">
            #{level},
        </if>
        <if test="bizType != null and bizType != ''">
            #{bizType},
        </if>
        <if test="expired != null and expired != ''">
            #{expired},
        </if>
        <if test="isLeaf != null and isLeaf != ''">
            #{isLeaf},
        </if>
        <if test="remark != null and remark != ''">
            #{remark},
        </if>
        <if test="desc != null and desc != ''">
            #{desc},
        </if>
        <if test="benchName != null and benchName != ''">
            #{benchName},
        </if>
        <if test="createBy != null and createBy != ''">
            #{createBy},
        </if>
        <if test="updateTime != null">
            #{updateTime},
        </if>
        <if test="updateBy != null and updateBy != ''">
            #{updateBy},
        </if>
        <if test="createTime != null">
            #{createTime}
        </if>
        )
    </insert>

    <update id="updateDicQual" parameterType="com.silita.model.DicQua">
        update `dic_qua`
        set
        <if test="parentId != null and parentId != ''">
            `parent_id` = #{parentId},
        </if>
        <if test="quaName != null and quaName != ''">
            `qua_name` = #{quaName},
        </if>
        <if test="gradeType != null and gradeType != ''">
            `grade_type` = #{gradeType},
        </if>
        <if test="quaCode != null and quaCode != ''">
            `qua_code` = #{quaCode},
        </if>
        <if test="orderNo != null and orderNo != ''">
            `order_no` = #{orderNo},
        </if>
        <if test="level != null and level != ''">
            `level` = #{level},
        </if>
        <if test="bizType != null and bizType != ''">
            `biz_type` = #{bizType},
        </if>
        <if test="expired != null and expired != ''">
            `expired` = #{expired},
        </if>
        <if test="isLeaf != null and isLeaf != ''">
            `is_leaf` = #{isLeaf},
        </if>
        <if test="remark != null and remark != ''">
            `remark` = {remark},
        </if>
        <if test="desc != null and desc != ''">
            `desc` = #{desc},
        </if>
        <if test="createBy != null and createBy != ''">
            `create_by` = #{createBy},
        </if>
        <if test="updateBy != null">
            `update_by` = #{updateBy},
        </if>
        <if test="updateTime != null">
            `update_time` = #{updateTime}
        </if>
        where `id` = #{id}
    </update>

    <update id="updateQual" parameterType="com.silita.model.DicQua">
        update `dic_qua`
        set
          bench_name = #{benchName}
        where `id` = #{id}
    </update>

    <delete id="delDicQual" parameterType="java.lang.String">
        delete from `dic_qua` where `id` = #{id};
    </delete>

    <select id="queryDicQuaList" parameterType="java.util.Map" resultMap="BaseResultMap">
        SELECT
        t.*
        ,t1.`qua_name` AS parentName
        FROM
        dic_qua t
        LEFT JOIN dic_qua t1 ON t.`parent_id` = t1.`id` and t1.`level` = 1
        where t.`level` = 2
        <if test="parentId != null and parentId != ''">
            and t.parent_id = #{parentId}
        </if>
        <if test="quaName != null and quaName != ''">
            and t.qua_name like CONCAT('%',#{quaName},'%')
        </if>
        order by t.create_time desc
    </select>

    <select id="queryQualCateList" resultType="java.util.Map">
        select id as id
                ,qua_name as quaName
        from dic_qua
        where `level` = 1
        order by order_no
    </select>

    <select id="queryQualCountByName" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(1)
        from dic_qua
        where 1=1
        and qua_name = #{quaName}
        <if test="parentId != null and parentId != ''">
            and parent_id = #{parentId}
        </if>
        <if test="id != null and id != ''">
            and id != #{id}
        </if>
    </select>

    <select id="queryQualDetail" parameterType="java.lang.String" resultMap="BaseResultMap">
        select *
        from dic_qua
        where qua_code = #{quaCode}
    </select>

    <select id="queryQualDetailName" parameterType="com.silita.model.DicQua" resultMap="BaseResultMap">
        select *
        from dic_qua
        where qua_name = #{quaName}
        AND `parent_id` = #{parentId}
    </select>

    <select id="queryQualDetailParentName" parameterType="java.lang.String" resultMap="BaseResultMap">
        select *
        from dic_qua
        where qua_name = #{quaName}
        AND `parent_id` is null
    </select>

    <select id="queryQualDetailById" parameterType="java.lang.String" resultMap="BaseResultMap">
        select *
        from dic_qua
        where id = #{pkid}
    </select>

    <select id="queryQualCodeByBenchName" parameterType="java.lang.String" resultType="java.lang.String">
      SELECT t.`qua_code` FROM dic_qua t WHERE t.`bench_name` = #{quaName} AND t.`level` != '1'
    </select>

    <!--查询资质标准名-->
    <select id="queryBenchName" resultType="java.util.Map">
        SELECT
          t.`qua_code` AS quaCode,
          t.`bench_name` AS benchName
        FROM
          dic_qua t
        WHERE t.`bench_name` IS NOT NULL
        AND t.`bench_name` = '工程设计建筑行业（建筑工程）'
    </select>


    <!--获取资质最后一级标准名称-->
    <select id="queryQuaparentId" resultType="java.util.Map" parameterType="map">
        SELECT
        d.id,
        d.bench_name AS benchName,
        d.qua_code AS quaCode,
        d.parent_id AS parentId
        FROM
        biaodaa_admin.dic_qua d
        WHERE d.level = #{noticeLevel}
        and d.id=#{parentId}
        <if test="benchName != null and benchName != ''">
            and d.bench_name like CONCAT('%',#{benchName},'%')
        </if>
        order by order_no
    </select>

    <select id="queryQuaparentIdIsNull" resultType="java.lang.Integer" parameterType="map">
        SELECT
        ifnull(count(0),0)
        FROM
        biaodaa_admin.dic_qua d
        where
        d.parent_id=#{zid}
    </select>
    <select id="queryDicQuaBenchNameListMap" resultType="java.util.Map" parameterType="map">
        SELECT
        d.id,
        d.qua_name as quaName,
        d.bench_name AS benchName,
        d.qua_code AS quaCode,
        d.parent_id AS parentId
        FROM
        biaodaa_admin.dic_qua d
        WHERE 1=1
        <if test="benchName != null and benchName != ''">
            and d.bench_name like CONCAT('%',#{benchName},'%')
        </if>
        <if test="zid != null and zid != ''">
            and d.id=#{zid}
        </if>
        order by order_no
    </select>
    <select id="queryDicQuaListMap" resultType="java.util.Map" parameterType="map">
        SELECT
        d.id,
        d.qua_name as quaName,
        d.bench_name AS benchName,
        d.qua_code AS quaCode,
        d.parent_id AS parentId
        FROM
        biaodaa_admin.dic_qua d
        WHERE 1=1
        <if test="parentId != null and parentId != ''">
            and d.id=#{parentId}
        </if>
        <if test="id != null and id != ''">
            and d.id=#{id}
        </if>
        order by order_no
    </select>

    <select id="queryDicQuaListMaps" resultType="java.util.Map" parameterType="map">
        SELECT
        d.id,
        d.qua_name as quaName,
        d.bench_name AS benchName,
        d.qua_code AS quaCode,
        d.parent_id AS parentId
        FROM
        biaodaa_admin.dic_qua d
        WHERE 1=1
        <if test="parentId != null and parentId != ''">
            and d.id=#{parentId}
        </if>
        order by order_no
    </select>

    <!--获取资质大类-->
    <select id="queryQuaOne" resultType="java.util.Map" parameterType="map">
        SELECT
          d.id,
          d.qua_name AS quaName,
          d.qua_code AS quaCode
        FROM
          biaodaa_admin.dic_qua d
        WHERE d.level = '1'
        <if test="id != null and id != ''">
            and d.id = #{id}
        </if>
        order by order_no
    </select>
    <!--获取资质最后一级标准名称-->
    <select id="queryQuaTwo" resultType="java.util.Map" parameterType="map">
         SELECT
            d.id,
            d.bench_name AS benchName,
            d.qua_code AS quaCode,
            d.qua_name as quaName
          FROM
            biaodaa_admin.dic_qua d
          WHERE 1=1
          <if test="zzIdOne != null and zzIdOne != ''">
              and d.parent_id=#{zzIdOne}
          </if>
          <if test="two != null and two != ''">
              and d.id = #{two}
          </if>
            order by d.order_no
    </select>

    <select id="queryQuaThree" resultType="java.util.Map" parameterType="map">
        SELECT
        d.id,
        d.bench_name AS benchName,
        d.qua_code AS quaCode,
        d.qua_name as quaName
        FROM
        biaodaa_admin.dic_qua d
        WHERE 1=1
        <if test="zzIdOne != null and zzIdOne != ''">
            and d.parent_id=#{zzIdOne}
        </if>
        <if test="three != null and three != ''">
            and d.id = #{three}
        </if>
        order by d.order_no
    </select>

    <select id="queryQuaFout" resultType="java.util.Map" parameterType="map">
        SELECT
        d.id,
        d.bench_name AS benchName,
        d.qua_code AS quaCode,
        d.qua_name as quaName
        FROM
        biaodaa_admin.dic_qua d
        WHERE 1=1
        <if test="zzIdOne != null and zzIdOne != ''">
            and d.parent_id=#{zzIdOne}
        </if>
        <if test="four != null and four != ''">
            and d.id = #{four}
        </if>
        order by d.order_no
    </select>

    <!--获取一级资质-->
    <select id="queryQuaOnes" resultType="java.util.Map" parameterType="map">
        SELECT
        d.id,
        d.qua_name AS quaName,
        d.qua_code AS quaCode
        FROM
        biaodaa_admin.dic_qua d
        WHERE d.level = '1'
        order by order_no
    </select>
    <!--获取二级资质-->
    <select id="queryQuaTwos" resultType="java.util.Map" parameterType="map">
        SELECT
        d.id,
        d.bench_name AS benchName,
        d.qua_code AS quaCode,
        d.qua_name as quaName
        FROM
        biaodaa_admin.dic_qua d
        WHERE d.level = #{noticeLevel}
        and d.parent_id=#{zzIdOne}
        order by order_no
    </select>
    <select id="queryBenchNames" resultType="java.lang.String" parameterType="map">
        SELECT
          bench_name AS benchName
        FROM
          biaodaa_admin.`dic_qua`
        WHERE bench_name LIKE CONCAT('%',#{benchName}, '%')
    </select>


</mapper>